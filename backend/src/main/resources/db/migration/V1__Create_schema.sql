-- Flyway migration V1: Create database schema
-- This script creates all the necessary tables for the Book Review Platform

-- Create books table
CREATE TABLE IF NOT EXISTS books (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author VARCHAR(255) NOT NULL,
    description VARCHAR(2000),
    cover_image_url VARCHAR(255),
    published_year INTEGER CHECK ((published_year <= 2100) AND (published_year >= 1000)),
    average_rating NUMERIC(3,2),
    total_reviews INTEGER CHECK (total_reviews >= 0),
    created_at TIMESTAMP(6) NOT NULL,
    updated_at TIMESTAMP(6)
);

-- Create users table
CREATE TABLE IF NOT EXISTS users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    bio VARCHAR(500),
    role VARCHAR(255) CHECK (role IN ('USER', 'ADMIN')),
    created_at TIMESTAMP(6) NOT NULL,
    updated_at TIMESTAMP(6)
);

-- Create book_genres table (many-to-many relationship)
CREATE TABLE IF NOT EXISTS book_genres (
    book_id BIGINT NOT NULL,
    genre VARCHAR(255) CHECK (genre IN ('FICTION', 'NON_FICTION', 'MYSTERY', 'ROMANCE', 'SCIENCE_FICTION', 'FANTASY', 'BIOGRAPHY', 'HISTORY', 'SELF_HELP', 'BUSINESS', 'TECHNOLOGY', 'HEALTH', 'COOKING', 'TRAVEL', 'CHILDREN')),
    PRIMARY KEY (book_id, genre)
);

-- Create reviews table
CREATE TABLE IF NOT EXISTS reviews (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL,
    book_id BIGINT NOT NULL,
    rating INTEGER NOT NULL CHECK ((rating >= 1) AND (rating <= 5)),
    review_text VARCHAR(2000),
    created_at TIMESTAMP(6) NOT NULL,
    updated_at TIMESTAMP(6),
    CONSTRAINT uk_book_user_review UNIQUE (book_id, user_id)
);

-- Create recommendations table
CREATE TABLE IF NOT EXISTS recommendations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL,
    book_id BIGINT NOT NULL,
    strategy VARCHAR(255) NOT NULL CHECK (strategy IN ('TOP_RATED', 'GENRE_SIMILARITY', 'FAVORITES_SIMILARITY', 'AI_POWERED')),
    confidence NUMERIC(5,4),
    reasoning VARCHAR(1000),
    created_at TIMESTAMP(6) NOT NULL,
    expires_at TIMESTAMP(6)
);

-- Create user_favorite_books table (many-to-many relationship)
CREATE TABLE IF NOT EXISTS user_favorite_books (
    user_id BIGINT NOT NULL,
    book_id BIGINT NOT NULL,
    PRIMARY KEY (user_id, book_id)
);

-- Create user_preferred_genres table (many-to-many relationship)
CREATE TABLE IF NOT EXISTS user_preferred_genres (
    user_id BIGINT NOT NULL,
    preferred_genres VARCHAR(255) CHECK (preferred_genres IN ('FICTION', 'NON_FICTION', 'MYSTERY', 'ROMANCE', 'SCIENCE_FICTION', 'FANTASY', 'BIOGRAPHY', 'HISTORY', 'SELF_HELP', 'BUSINESS', 'TECHNOLOGY', 'HEALTH', 'COOKING', 'TRAVEL', 'CHILDREN')),
    PRIMARY KEY (user_id, preferred_genres)
);

-- Add foreign key constraints
ALTER TABLE IF EXISTS book_genres 
    ADD CONSTRAINT FK_book_genres_book_id 
    FOREIGN KEY (book_id) REFERENCES books(id);

ALTER TABLE IF EXISTS reviews 
    ADD CONSTRAINT FK_reviews_book_id 
    FOREIGN KEY (book_id) REFERENCES books(id);

ALTER TABLE IF EXISTS reviews 
    ADD CONSTRAINT FK_reviews_user_id 
    FOREIGN KEY (user_id) REFERENCES users(id);

ALTER TABLE IF EXISTS recommendations 
    ADD CONSTRAINT FK_recommendations_book_id 
    FOREIGN KEY (book_id) REFERENCES books(id);

ALTER TABLE IF EXISTS recommendations 
    ADD CONSTRAINT FK_recommendations_user_id 
    FOREIGN KEY (user_id) REFERENCES users(id);

ALTER TABLE IF EXISTS user_favorite_books 
    ADD CONSTRAINT FK_user_favorite_books_book_id 
    FOREIGN KEY (book_id) REFERENCES books(id);

ALTER TABLE IF EXISTS user_favorite_books 
    ADD CONSTRAINT FK_user_favorite_books_user_id 
    FOREIGN KEY (user_id) REFERENCES users(id);

ALTER TABLE IF EXISTS user_preferred_genres 
    ADD CONSTRAINT FK_user_preferred_genres_user_id 
    FOREIGN KEY (user_id) REFERENCES users(id);
