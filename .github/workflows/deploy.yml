name: 🚀 Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - development
        - staging
        - production

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  ECR_REPOSITORY: book-review-platform
  ECS_SERVICE: book-review-platform-service
  ECS_CLUSTER: book-review-platform-cluster
  CONTAINER_NAME: book-review-backend

jobs:
  # Build and Push Docker Images
  build:
    name: 🏗️ Build & Push Images
    runs-on: ubuntu-latest
    outputs:
      backend-image: ${{ steps.build-backend.outputs.image }}
      frontend-image: ${{ steps.build-frontend.outputs.image }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: 🔑 Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: 🏗️ Build Backend Image
      id: build-backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build backend image
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-backend:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-backend:latest .
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-backend:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-backend:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY-backend:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: ⚛️ Build Frontend Image
      id: build-frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build frontend image
        cd frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-frontend:$IMAGE_TAG \
          --build-arg VITE_API_BASE_URL=https://api.yourdomain.com/api/v1 .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-frontend:latest \
          --build-arg VITE_API_BASE_URL=https://api.yourdomain.com/api/v1 .
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-frontend:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-frontend:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY-frontend:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # Deploy Infrastructure with Terraform
  deploy-infrastructure:
    name: 🏗️ Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build
    outputs:
      cluster-name: ${{ steps.terraform.outputs.cluster_name }}
      service-name: ${{ steps.terraform.outputs.service_name }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false
        
    - name: 🔧 Terraform Init
      working-directory: ./infra/backend
      run: terraform init
      
    - name: 📋 Terraform Plan
      working-directory: ./infra/backend
      run: |
        terraform plan \
          -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
          -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
          -var="container_image=${{ needs.build.outputs.backend-image }}" \
          -var="environment=production" \
          -out=tfplan
          
    - name: 🚀 Terraform Apply
      id: terraform
      working-directory: ./infra/backend
      run: |
        terraform apply -auto-approve tfplan
        
        # Output values for next job
        echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
        echo "service_name=$(terraform output -raw service_name)" >> $GITHUB_OUTPUT
        echo "alb_dns_name=$(terraform output -raw alb_dns_name)" >> $GITHUB_OUTPUT

  # Deploy Application to ECS
  deploy-application:
    name: 🚀 Deploy Application
    runs-on: ubuntu-latest
    needs: [build, deploy-infrastructure]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: 📋 Download Task Definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ needs.deploy-infrastructure.outputs.service-name }} \
          --query taskDefinition > task-definition.json
          
    - name: 🔄 Update Task Definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ needs.build.outputs.backend-image }}
        environment-variables: |
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          SPRING_PROFILES_ACTIVE=production
          
    - name: 🚀 Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ needs.deploy-infrastructure.outputs.service-name }}
        cluster: ${{ needs.deploy-infrastructure.outputs.cluster-name }}
        wait-for-service-stability: true
        
    - name: 🔍 Verify Deployment
      run: |
        echo "🎉 Deployment completed!"
        echo "🔗 Backend URL: http://${{ needs.deploy-infrastructure.outputs.alb-dns-name }}"
        echo "🏥 Health Check: http://${{ needs.deploy-infrastructure.outputs.alb-dns-name }}/actuator/health"
        
        # Test health endpoint
        sleep 30
        curl -f "http://${{ needs.deploy-infrastructure.outputs.alb-dns-name }}/actuator/health" || exit 1
        echo "✅ Health check passed!"

  # Notify Deployment Status
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [build, deploy-infrastructure, deploy-application]
    if: always()
    
    steps:
    - name: 📢 Deployment Success
      if: needs.deploy-application.result == 'success'
      run: |
        echo "🎉 Deployment successful!"
        echo "Backend: ${{ needs.build.outputs.backend-image }}"
        echo "Frontend: ${{ needs.build.outputs.frontend-image }}"
        
    - name: 📢 Deployment Failed
      if: needs.deploy-application.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        exit 1
        
    - name: 📢 Summary
      run: |
        echo "🎉 Deployment Summary"
        echo "===================="
        echo "📊 Status: ${{ needs.deploy-application.result == 'success' && '✅ SUCCESS' || '❌ FAILED' }}"
        echo "🔗 Commit: ${{ github.sha }}"
        echo "👤 Author: ${{ github.actor }}"
        echo "🌍 Environment: Production"
        echo "🏗️ Backend Image: ${{ needs.build.outputs.backend-image }}"
        echo "⚛️ Frontend Image: ${{ needs.build.outputs.frontend-image }}"
